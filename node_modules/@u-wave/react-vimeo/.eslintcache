[{"/home/goto-bus-stop/Code/u-wave/react-vimeo/example/app.js":"1","/home/goto-bus-stop/Code/u-wave/react-vimeo/rollup.config.js":"2","/home/goto-bus-stop/Code/u-wave/react-vimeo/src/eventNames.js":"3","/home/goto-bus-stop/Code/u-wave/react-vimeo/src/index.js":"4","/home/goto-bus-stop/Code/u-wave/react-vimeo/test/test.js":"5","/home/goto-bus-stop/Code/u-wave/react-vimeo/test/util/createVimeo.js":"6","/home/goto-bus-stop/Code/u-wave/react-vimeo/test/util/render.js":"7","/home/goto-bus-stop/Code/u-wave/react-vimeo/tools/generate-docs.js":"8"},{"size":2716,"mtime":1584272048289,"results":"9","hashOfConfig":"10"},{"size":405,"mtime":1517474898980,"results":"11","hashOfConfig":"10"},{"size":324,"mtime":1543490675367,"results":"12","hashOfConfig":"10"},{"size":8915,"mtime":1585675548564,"results":"13","hashOfConfig":"10"},{"size":5046,"mtime":1582973161278,"results":"14","hashOfConfig":"15"},{"size":1465,"mtime":1582973161278,"results":"16","hashOfConfig":"15"},{"size":1410,"mtime":1584278772259,"results":"17","hashOfConfig":"15"},{"size":3632,"mtime":1569397396034,"results":"18","hashOfConfig":"10"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"o2xneh",{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1d3jnir",{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"35"},"/home/goto-bus-stop/Code/u-wave/react-vimeo/example/app.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/rollup.config.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/src/eventNames.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/src/index.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/test/test.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/test/util/createVimeo.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/test/util/render.js",[],"/home/goto-bus-stop/Code/u-wave/react-vimeo/tools/generate-docs.js",["36"],"/**\n * Auto-generate documentation from the component's propTypes.\n * Adapted from Material-UI's PropTypeDescription component:\n *  https://github.com/callemall/material-ui/blob/82482758573dc714b210529dcf092dab904db0ba/docs/src/app/components/PropTypeDescription.js\n * (c) Call-Em-All\n */\n\nconst fs = require('fs');\nconst { parse } = require('react-docgen');\nconst parseDoctrine = require('doctrine').parse;\n\nfunction generatePropType(type) {\n  switch (type.name) {\n    case 'func':\n      return 'function';\n    case 'custom':\n      return type.raw;\n    case 'enum': {\n      const values = type.value.map((v) => v.value).join('<br>&nbsp;');\n      return `enum:<br>&nbsp;${values}<br>`;\n    }\n    case 'union':\n      return type.value.map((v) => v.name).join(' / ');\n    default:\n      return type.name;\n  }\n}\n\nfunction generateDescription(required, description, type) {\n  const parsed = parseDoctrine(description);\n\n  // two new lines result in a newline in the table. all other new lines\n  // must be eliminated to prevent markdown mayhem.\n  const jsDocText = parsed.description.replace(/\\n\\n/g, '<br>').replace(/\\n/g, ' ');\n\n  if (parsed.tags.some((tag) => tag.title === 'ignore')) {\n    return null;\n  }\n  let signature = '';\n\n  if (type.name === 'func' && parsed.tags.length > 0) {\n    // Remove new lines from tag descriptions to avoid markdown errors.\n    parsed.tags.forEach((tag) => {\n      if (tag.description) {\n        // eslint-disable-next-line no-param-reassign\n        tag.description = tag.description.replace(/\\n/g, ' ');\n      }\n    });\n\n    // Split up the parsed tags into 'arguments' and 'returns' parsed objects. If there's no\n    // 'returns' parsed object (i.e., one with title being 'returns'), make one of type 'void'.\n    const parsedLength = parsed.tags.length;\n    let parsedArgs = [];\n    let parsedReturns;\n\n    if (parsed.tags[parsedLength - 1].title === 'returns') {\n      parsedArgs = parsed.tags.slice(0, parsedLength - 1);\n      parsedReturns = parsed.tags[parsedLength - 1];\n    } else {\n      parsedArgs = parsed.tags;\n      parsedReturns = {\n        type: { name: 'void' },\n      };\n    }\n\n    signature += '<br><br>**Signature:**<br>`function(';\n    signature += parsedArgs.map((tag) => `${tag.name}: ${tag.type.name}`).join(', ');\n    signature += `) => ${parsedReturns.type.name}\\`<br>`;\n    signature += parsedArgs.map((tag) => `*${tag.name}:* ${tag.description}`).join('<br>');\n    if (parsedReturns.description) {\n      signature += `<br> *returns* (${parsedReturns.type.name}): ${parsedReturns.description}`;\n    }\n  }\n\n  return `${jsDocText}${signature}`;\n}\n\nfunction render(code) {\n  let text = '| Name | Type | Default | Description |\\n'\n             + '|:-----|:-----|:-----|:-----|\\n';\n\n  const componentInfo = parse(code);\n\n  Object.keys(componentInfo.props).forEach((key) => {\n    const prop = componentInfo.props[key];\n\n    const description = generateDescription(prop.required, prop.description, prop.type);\n\n    if (description === null) return;\n\n    let defaultValue = '';\n\n    if (prop.defaultValue) {\n      defaultValue = prop.defaultValue.value.replace(/\\n/g, '');\n    }\n\n    if (prop.required) {\n      key = `<span style=\"color: #31a148\">${key} *</span>`; // eslint-disable-line no-param-reassign\n    }\n\n    text += `| ${key} | ${generatePropType(prop.type)} | ${defaultValue} | ${description} |\\n`;\n  });\n\n  return text;\n}\n\nconst source = fs.readFileSync('src/index.js', 'utf8')\n  // react-docgen doesn't pick up on \"import * as React\" for some reason, so\n  // hack around that\n  .replace('* as React', 'React');\nconst markdown = render(source);\n\nconsole.log(markdown);\n",{"ruleId":"37","severity":1,"message":"38","line":113,"column":1,"nodeType":"39","messageId":"40","endLine":113,"endColumn":12},"no-console","Unexpected console statement.","MemberExpression","unexpected"]